/*
 * Copyright (c) 2018-2021 VMware Inc. or its affiliates, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import me.champeau.gradle.japicmp.JapicmpTask

plugins {
  id "com.jfrog.artifactory" version "4.15.2" apply false
  id 'biz.aQute.bnd.builder' version '5.0.1' apply false
  id "me.champeau.gradle.japicmp" version "0.2.6"
  id "de.undercouch.download" version "3.4.3"
  id "com.github.erizo.gradle.jcstress" version "0.8.4"
  id "idea"
  id "com.diffplug.spotless" version "5.14.0"
}

description = 'Reactive Object Pool'

ext {
  if (project.hasProperty('versionBranch') && version.toString().endsWith(".BUILD-SNAPSHOT")) {
    versionBranch = versionBranch.replaceAll("\"", "").trim()
    if (!versionBranch.isEmpty()) {
      realVersion = version.toString().replace("BUILD-SNAPSHOT", versionBranch + ".BUILD-SNAPSHOT")
      project.version = realVersion
      println "Building special snapshot ${project.version}"
    }
  }

  isCiServer = System.getenv().containsKey("CI") //doesn't detect Bamboo, but eh

  gradleScriptDir = "${rootProject.projectDir}/gradle"

  //Note that reactor-core version is now defined in `gradle.properties`
  hdrHistogramVersion = "2.1.11"

  // Languages
  groovyVersion = '2.4.1'

  // Logging
  slf4jVersion = '1.7.12'
  logbackVersion = '1.1.2'

  // Testing
  jUnitPlatformVersion = '5.7.1'
  mockitoVersion = '1.10.19'
  assertJVersion = '3.9.0'
  awaitilityVersion = '3.1.3'

  rxJava2Version = '2.2.7'

  javadocLinks = ["https://docs.oracle.com/javase/7/docs/api/",
                  "https://docs.oracle.com/javaee/6/api/",
                  "https://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/",
                  "https://projectreactor.io/docs/core/release/api/"] as String[]

  bndOptions = [
          "Export-Package": [
                  "!*internal*",
                  "reactor.pool.*"
          ].join(","),
          "Import-Package": [
                  "!javax.annotation",
                  "*"
          ].join(","),
          "Bundle-Name" : "reactor-pool",
          "Bundle-SymbolicName" : "io.projectreactor.addons.reactor-pool"
  ]
}


configure(rootProject) { project ->
  group = 'io.projectreactor.addons'

  apply plugin: 'java-library'
  apply plugin: 'jacoco'
  apply plugin: 'biz.aQute.bnd.builder'
  apply from: "$gradleScriptDir/doc.gradle"
  apply from: "$gradleScriptDir/setup.gradle"
  apply from: "${gradleScriptDir}/releaser.gradle"

  jacocoTestReport {
    reports {
      xml.enabled = true
      html.enabled = true
    }
  }

  [compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:varargs",
                                                           "-Xlint:cast",
                                                           "-Xlint:classfile",
                                                           "-Xlint:dep-ann",
                                                           "-Xlint:divzero",
                                                           "-Xlint:empty",
                                                           "-Xlint:finally",
                                                           "-Xlint:overrides",
                                                           "-Xlint:path",
                                                           "-Xlint:processing",
                                                           "-Xlint:static",
                                                           "-Xlint:try",
                                                           "-Xlint:deprecation",
                                                           "-Xlint:unchecked",
                                                           "-Xlint:-serial",      // intentionally disabled
                                                           "-Xlint:-options",     // intentionally disabled
                                                           "-Xlint:-fallthrough", // intentionally disabled
                                                           "-Xlint:rawtypes"
  ]

  compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
  }

  compileTestJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
  }

  if (JavaVersion.current().isJava8Compatible()) {
    compileTestJava.options.compilerArgs += "-parameters"
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
      options.addStringOption('encoding', 'UTF-8')
    }
  }

  [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
  sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

  project.tasks.withType(Test).all {
    systemProperty("java.awt.headless", "true")
    systemProperty("testGroups", project.properties.get("testGroups"))
    scanForTestClasses = false
    include '**/*Tests.*'
    include '**/*Test.*'
    include '**/*Spec.*'
    exclude '**/*Abstract*.*'
  }

  spotless {
    if (project.hasProperty("spotlessFrom")) {
      println "[Spotless] Ratchet from $project.spotlessFrom"
      ratchetFrom project.spotlessFrom
    }
    else if (isCiServer) {
      println "[Spotless] CI detected without explicit branch, not enforcing check"
      enforceCheck false
    }
    else {
      String spotlessBranch = "origin/0.1.x"
      println "[Spotless] Local run detected, ratchet from $spotlessBranch"
      ratchetFrom spotlessBranch
    }
    java {
      target '**/*.java'
      licenseHeaderFile('codequality/spotless/licenseSlashstarStyle.txt')
    }
  }

  test {
    useJUnitPlatform()
    testLogging {
      events  "passed", "failed"
      showExceptions true
      exceptionFormat "full"
      showStandardStreams true
    }
  }

  repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    if (version.endsWith('BUILD-SNAPSHOT')) {
      maven { url 'https://repo.spring.io/snapshot' }
    }
    maven { url 'https://repo.spring.io/milestone' }
  }

  dependencies {
    api "io.projectreactor:reactor-core:$reactorCoreVersion"

    // JSR-305 annotations
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"

    // Testing
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    testImplementation "org.awaitility:awaitility:$awaitilityVersion"
    testImplementation "org.hdrhistogram:HdrHistogram:$hdrHistogramVersion"
    testRuntimeOnly "org.slf4j:jcl-over-slf4j:$slf4jVersion"
    testRuntimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"

    testImplementation "io.projectreactor:reactor-test:$reactorCoreVersion"
    testImplementation "io.projectreactor.addons:reactor-extra:$reactorAddonsVersion"

    testImplementation "io.reactivex.rxjava2:rxjava:$rxJava2Version"

    testImplementation platform("org.junit:junit-bom:${jUnitPlatformVersion}")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
  }

  jar {
    manifest {
      attributes("Created-By": "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})",
              "Implementation-Title": project.name,
              "Implementation-Version": project.version,
              "Automatic-Module-Name": "reactor.pool")
    }
    bnd(bndOptions)
  }

  check.dependsOn jacocoTestReport
}


configurations.all {
  // check for updates every build
  resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


task downloadBaseline(type: Download) {
  onlyIfNewer true
  compress true

  src "${repositories.mavenCentral().url}io/projectreactor/addons/reactor-pool/$compatibleVersion/reactor-pool-${compatibleVersion}.jar"
  dest "${buildDir}/baselineLibs/reactor-pool-${compatibleVersion}.jar"
}

task japicmp(type: JapicmpTask) {
  if (project.gradle.startParameter.isOffline()) {
    println "Offline: skipping downloading of baseline and JAPICMP"
    enabled = false
  }
  else if ("$compatibleVersion" == "SKIP") {
    println "SKIP: Instructed to skip the baseline comparison"
    enabled = false
  }
  else {
    println "Will download and perform baseline comparison with ${compatibleVersion}"
    dependsOn(downloadBaseline)
  }

  oldClasspath = tasks.downloadBaseline.outputs.files
  newClasspath = tasks.jar.outputs.files
  onlyBinaryIncompatibleModified = true
  failOnModification = true
  failOnSourceIncompatibility = true
  txtOutputFile = file("${project.buildDir}/reports/japi.txt")
  ignoreMissingClasses = true
  includeSynthetic = true

  //TODO after a release, bump the gradle.properties baseline
  //TODO after a release, remove the reactor-pool exclusions below if any
  classExcludes = [
  ]
  methodExcludes = [
  ]
}
check.dependsOn japicmp

gradle.taskGraph.afterTask { task, state ->
  if (task instanceof JapicmpTask && state.failure) {
    print file("${project.buildDir}/reports/japi.txt").getText()
  }
}

jcstress {
  mode = 'default' //quick, default, tough
}
tasks.jcstressJar.classifier("jcstress") // make sure jcstress jar doesn't override our own
tasks.check.dependsOn(tasks.jcstress)
